{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n *\n * @param o the object to deep freeze\n * @returns {*}\n */\n\n\nfunction deepFreeze(o) {\n  Object.freeze(o);\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (o.hasOwnProperty(prop) && o[prop] !== null && (_typeof(o[prop]) === \"object\" || typeof o[prop] === \"function\") && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\n/**\n *\n * Base Store to extend\n *\n * data attribute contains the state of the store\n *\n * You can subscribe to data$ to be notified when data change\n * Example :\n * let subscription = store.watch(cb)\n * store.unwatch(subscription) // when you're done with it\n *\n */\n\n\nfunction BaseStore(initialData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var handlers = [];\n  var nextHandlerId = 0;\n  return {\n    get data() {\n      return initialData;\n    },\n\n    set data(t) {\n      initialData = options.disableDeepFreeze ? t : deepFreeze(t);\n      handlers.forEach(function (handler) {\n        handler.handler(initialData);\n      });\n    },\n\n    watch: function watch(cb) {\n      var ID = nextHandlerId++;\n      handlers.push({\n        id: ID,\n        handler: cb\n      });\n      return ID;\n    },\n    unwatch: function unwatch(id) {\n      for (var i = 0; i < handlers.length; i++) {\n        if (handlers[i].id === id) {\n          handlers.splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = BaseStore;","map":null,"metadata":{},"sourceType":"script"}