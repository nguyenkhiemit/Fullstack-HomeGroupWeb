{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\nimport RouterContext from \"./RouterContext\";\n\nvar Block = function (_React$Component) {\n  _inherits(Block, _React$Component);\n\n  function Block(props) {\n    _classCallCheck(this, Block);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.release = props.method(props.message);\n    return _this;\n  }\n\n  Block.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.message !== this.props.message) {\n      this.release();\n      this.release = this.props.method(this.props.message);\n    }\n  };\n\n  Block.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.release();\n  };\n\n  Block.prototype.render = function render() {\n    return null;\n  };\n\n  return Block;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  var messageType = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);\n  Block.propTypes = {\n    method: PropTypes.func.isRequired,\n    message: messageType.isRequired\n  };\n}\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\n\nfunction Prompt(props) {\n  return React.createElement(RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <Prompt> outside a <Router>\") : invariant(false) : void 0;\n    return props.when ? React.createElement(Block, {\n      method: context.history.block,\n      message: props.message\n    }) : null;\n  });\n}\n\nPrompt.defaultProps = {\n  when: true\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  var _messageType = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);\n\n  Prompt.propTypes = {\n    when: PropTypes.bool,\n    message: _messageType.isRequired\n  };\n}\n\nexport default Prompt;","map":null,"metadata":{},"sourceType":"module"}