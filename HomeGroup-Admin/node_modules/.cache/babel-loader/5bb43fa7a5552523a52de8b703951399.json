{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"warning\";\nimport RouterContext from \"./RouterContext\";\nimport warnAboutGettingProperty from \"./utils/warnAboutGettingProperty\";\n\nfunction getContext(props, state) {\n  return {\n    history: props.history,\n    location: state.location,\n    match: Router.computeRootMatch(state.location.pathname),\n    staticContext: props.staticContext\n  };\n}\n/**\n * The public API for putting history on context.\n */\n\n\nvar Router = function (_React$Component) {\n  _inherits(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: \"/\",\n      url: \"/\",\n      params: {},\n      isExact: pathname === \"/\"\n    };\n  }; // TODO: Remove this\n  // TODO: Remove this\n\n\n  Router.prototype.getChildContext = function getChildContext() {\n    var context = getContext(this.props, this.state);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      var contextWithoutWarnings = Object.assign({}, context);\n      Object.keys(context).forEach(function (key) {\n        warnAboutGettingProperty(context, key, \"You should not be using this.context.router.\" + key + \" directly. It is private API \" + \"for internal use only and is subject to change at any time. Instead, use \" + \"a <Route> or withRouter() to access the current location, match, etc.\");\n      });\n      context._withoutWarnings = contextWithoutWarnings;\n    }\n\n    return {\n      router: context\n    };\n  };\n\n  function Router(props) {\n    _classCallCheck(this, Router);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = {\n      location: props.history.location\n    };\n    _this.unlisten = props.history.listen(function (location) {\n      _this.setState({\n        location: location\n      });\n    });\n    return _this;\n  }\n\n  Router.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.unlisten();\n  };\n\n  Router.prototype.render = function render() {\n    var context = getContext(this.props, this.state);\n    return React.createElement(RouterContext.Provider, {\n      children: this.props.children || null,\n      value: context\n    });\n  };\n\n  return Router;\n}(React.Component);\n\nRouter.childContextTypes = {\n  router: PropTypes.object.isRequired\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  Router.propTypes = {\n    children: PropTypes.node,\n    history: PropTypes.object.isRequired,\n    staticContext: PropTypes.object\n  };\n\n  Router.prototype.componentDidUpdate = function (prevProps) {\n    process.env.NODE_ENV !== \"production\" ? warning(prevProps.history === this.props.history, \"You cannot change <Router history>\") : void 0;\n  };\n}\n\nexport default Router;","map":null,"metadata":{},"sourceType":"module"}