{"version":3,"sources":["../src/Process.jsx"],"names":["Process","Component","state","api","undefined","handleProcess","fn","setState","data","error","loading","Error","handleReady","render","children","props"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;;;AAae,MAAMA,OAAN,SAAsBC,gBAAtB,CAA8C;AAAA;AAAA;;AAAA,gDAC3DC,KAD2D,GAC5C;AACbC,WAAKC;AADQ,KAD4C,OAK3DC,aAL2D;AAAA,iDAK3C,WAAOC,EAAP,EAAsC;AACpD,cAAKC,QAAL,CAAc;AACZC,gBAAMJ,SADM;AAEZK,iBAAOL,SAFK;AAGZM,mBAAS;AAHG,SAAd;;AAMA,YAAI;AACF,gBAAM,EAAEP,GAAF,KAAU,MAAKD,KAArB;AACA,cAAI,CAACC,GAAL,EAAU;AACR,kBAAM,IAAIQ,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,gBAAMH,OAAO,MAAMF,GAAGH,GAAH,CAAnB;;AAEA,gBAAKI,QAAL,CAAc;AACZC,gBADY;AAEZE,qBAAS;AAFG,WAAd;;AAKA,iBAAOF,IAAP;AACD,SAdD,CAcE,OAAOC,KAAP,EAAc;AACd,gBAAKF,QAAL,CAAc;AACZE,iBADY;AAEZC,qBAAS;AAFG,WAAd;;AAKA,gBAAMD,KAAN;AACD;AACF,OAlC0D;;AAAA;AAAA;AAAA;AAAA,eAoC3DG,WApC2D,GAoC5CT,GAAD,IAAuB;AACnC,WAAKI,QAAL,CAAc;AACZJ;AADY,OAAd;AAGD,KAxC0D;AAAA;;AA0C3DU,WAAS;AACP,UAAM,EAAEC,QAAF,KAAe,KAAKC,KAA1B;AACA,UAAM;AACJZ,SADI,EACCO,OADD,EACUF,IADV,EACgBC;AADhB,QAEF,KAAKP,KAFT;;AAIA,WACE;AAAC,0BAAD;AAAA,QAAY,SAAS,KAAKU,WAA1B;AACGE,eAAS;AACRJ,iBAAS,CAACP,GAAD,IAAQO,OADT;AAERL,uBAAe,KAAKA,aAFZ;AAGRG,YAHQ;AAIRC;AAJQ,OAAT;AADH,KADF;AAUD;AA1D0D;kBAAxCT,O","file":"Process.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport Initialize from './Initialize';\n\nexport type Props = {\n  children: Function,\n};\n\ntype State = {\n  api?: Object,\n  isProcessing?: boolean,\n  error?: Error,\n  data?: any,\n};\n\nexport default class Process extends Component<Props, State> {\n  state: State = {\n    api: undefined,\n  };\n\n  handleProcess = async (fn: Function): Promise<any> => {\n    this.setState({\n      data: undefined,\n      error: undefined,\n      loading: true,\n    });\n\n    try {\n      const { api } = this.state;\n      if (!api) {\n        throw new Error('Facebook is not initialized. Wait for isReady');\n      }\n\n      const data = await fn(api);\n\n      this.setState({\n        data,\n        loading: false,\n      });\n\n      return data;\n    } catch (error) {\n      this.setState({\n        error,\n        loading: false,\n      });\n\n      throw error;\n    }\n  }\n\n  handleReady = (api: Object): void => {\n    this.setState({\n      api,\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    const {\n      api, loading, data, error,\n    } = this.state;\n\n    return (\n      <Initialize onReady={this.handleReady}>\n        {children({\n          loading: !api || loading,\n          handleProcess: this.handleProcess,\n          data,\n          error,\n        })}\n      </Initialize>\n    );\n  }\n}\n"]}