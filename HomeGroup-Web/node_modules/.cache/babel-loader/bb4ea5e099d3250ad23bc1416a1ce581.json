{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createLocation, locationsAreEqual } from \"history\";\nimport invariant from \"invariant\";\nimport RouterContext from \"./RouterContext\";\nimport generatePath from \"./generatePath\";\n\nvar Navigate = function (_React$Component) {\n  _inherits(Navigate, _React$Component);\n\n  function Navigate(props) {\n    _classCallCheck(this, Navigate);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    props.method(props.to);\n    return _this;\n  }\n\n  Navigate.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!locationsAreEqual(prevProps.to, this.props.to)) {\n      this.props.method(this.props.to);\n    }\n  };\n\n  Navigate.prototype.render = function render() {\n    return null;\n  };\n\n  return Navigate;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  var locationType = PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n    search: PropTypes.string.isRequired,\n    hash: PropTypes.string.isRequired\n  });\n  Navigate.propTypes = {\n    method: PropTypes.func.isRequired,\n    to: locationType.isRequired\n  };\n}\n/**\n * The public API for navigating programmatically with a component.\n */\n\n\nfunction Redirect(props) {\n  return React.createElement(RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <Redirect> outside a <Router>\") : invariant(false) : void 0;\n    var method = props.push ? context.history.push : context.history.replace;\n    var to = createLocation(props.computedMatch ? typeof props.to === \"string\" ? generatePath(props.to, props.computedMatch.params) : Object.assign({}, props.to, {\n      pathname: generatePath(props.to.pathname, props.computedMatch.params)\n    }) : props.to);\n    return React.createElement(Navigate, {\n      method: method,\n      to: to\n    });\n  });\n}\n\nRedirect.defaultProps = {\n  push: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  Redirect.propTypes = {\n    push: PropTypes.bool,\n    from: PropTypes.string,\n    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired\n  };\n}\n\nexport default Redirect;","map":null,"metadata":{},"sourceType":"module"}